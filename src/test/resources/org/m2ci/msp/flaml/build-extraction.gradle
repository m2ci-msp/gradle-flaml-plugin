plugins {
    id 'org.m2ci.msp.flaml'
}

flaml {
    flacFile = 'foobar.flac'
    yamlFile = 'foobar.yaml'
}

task testExtractWavFiles {
    dependsOn extractWavFiles
    doLast {
        ['foo.wav', 'bar.wav', 'baz.wav'].each { name ->
            def expected = file(name)
            def actual = file("$buildDir/wav/$name")
            assert actual.canRead()
            assert actual.bytes == expected.bytes
        }
    }
}

task testExtractLabFiles {
    dependsOn extractLabFiles
    doLast {
        ['foo.lab', 'baz.lab'].each { name ->
            def expectedFile = file(name)
            def expected = new org.m2ci.msp.jtgt.io.XWaveLabelSerializer().fromString(expectedFile.text)
            def actualFile = file("$buildDir/lab/$name")
            def actual = new org.m2ci.msp.jtgt.io.XWaveLabelSerializer().fromString(actualFile.text)
            assert actual == expected
        }
    }
}

extractTextGrid {
    textGridFile = layout.buildDirectory.file('foobar.TextGrid')
}

task testExtractTextGrid {
    dependsOn extractTextGrid
    doLast {
        def expectedFile = file('foobar.TextGrid')
        def expected = new org.m2ci.msp.jtgt.io.TextGridSerializer().fromString(expectedFile.text)
        def actualFile = file("$buildDir/foobar.TextGrid")
        def actual = new org.m2ci.msp.jtgt.io.TextGridSerializer().fromString(actualFile.text)
        assert actual == expected
    }
}

task testExtractTextFiles {
    dependsOn extractTextFiles
    doLast {
        ['foo.txt', 'baz.txt'].each { name ->
            def expected = file(name)
            def actual = file("$buildDir/text/$name")
            assert actual.text == expected.text
        }
    }
}
